"""
Django settings for gamesgroup project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta,datetime
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if config('DEBUG')=="True" else False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    # 'clearcache',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites',
    'allauth',
    'allauth.account',
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount',
    'rest_framework',
    'phone_field',
    'django_crontab',
    # 'rest_framework.authtoken',
    # 'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_yasg',

    #### CUSTOME APPLICATION #####
    'g_customer',
    'g_admin',
    'g_partners',
    'g_games',
    'django_q',
    # 'background_task',
]

Q_CLUSTER = {

    'name': 'django_qtst',
    'workers': 8,
    'recycle': 1000,
    'timeout': 60*1440,
    'retry' : 60*1440,
    'compress': True,
    'save_limit': 0,
    'queue_limit': 1000,
    'cpu_affinity': 1,
    'label': 'Django Q',
    'redis': {
        'host': 'localhost',
        'port': 6379,
        # 'password': 'p948710311f252a334c3b21cabe0bd63f943f68f0824cd41932781e7793c785bf',
        # 'db': 0,
    }

}

BROKER_URL = config('BROKER_URL')
# CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND')
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Calcutta'

AUTH_USER_MODEL = 'g_admin.User'
REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": ("g_partners.error_handler.custom_exception_handler"),
    'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_simplejwt.authentication.JWTAuthentication',
            'rest_framework.authentication.TokenAuthentication',
        ),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_PARSER_CLASSES': ['rest_framework.parsers.JSONParser', ]
}

SWAGGER_SETTINGS = {
   'DEFAULT_AUTO_SCHEMA_CLASS': 'g_partners.all_views.core_view.CustomAutoSchema',
   'SHOW_REQUEST_HEADERS': True,
   'USE_SESSION_AUTH': False,
   'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        }
    },  
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=4),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=4),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

# SITE_ID = 0
# LOGIN_REDIRECT_URL = '/'
# SOCIALACCOUNT_LOGIN_ON_GET=True
# SOCIALACCOUNT_QUERY_EMAIL = True
# ACCOUNT_LOGOUT_ON_GET= True
# ACCOUNT_UNIQUE_EMAIL = True
# ACCOUNT_EMAIL_REQUIRED = True

# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'SCOPE': [
#             'profile',
#             'email',
#         ],
#         'AUTH_PARAMS': {
#             'access_type': 'online',
#         }
#     }
# }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'g_admin.middleware.verify_token',
    'g_games.GamesDB.RouteDb',
    # 'django_auto_logout.middleware.auto_logout',
    'corsheaders.middleware.CorsMiddleware'
]
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 10*60
SESSION_SAVE_EVERY_REQUEST = True

# SESSION_COOKIE_AGE = 900
# AUTO_LOGOUT_DELAY=1
# SESSION_EXPIRE_SECONDS = 10
# SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
# SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# SESSION_COOKIE_AGE = 1 * 60
# AUTO_LOGOUT_DELAY=1
# TIME= 240*60  #four hours  or your time
# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
# SESSION_EXPIRE_AT_BROWSER_CLOSE= True
# SESSION_COOKIE_AGE = TIME    #change expired session
# SESSION_IDLE_TIMEOUT = TIME  #logout

# AUTO_LOGOUT = {'IDLE_TIME': 7200}

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3030',
]

ROOT_URLCONF = 'gamesgroup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django_auto_logout.context_processors.auto_logout_client',
            ],
            'libraries':{
                # make your file entry here.
                'filter_tags': 'gamesgroup.filter',
            }
        },
    },
]

WSGI_APPLICATION = 'gamesgroup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('APP_DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

DATE_FORMAT = "Y-m-d"

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "class": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename":f"logs/{datetime.now().strftime('%Y-%m-%d')}-logs.txt",
            "formatter": "customformater",
        },
    },
    "root": {"level": "ERROR", "handlers": ["class"]},
    "formatters": {
        "customformater": {
            'format' : u'%(asctime)s [%(levelname)-8s] '
            '(%(className)s.%(funcName)s:%(lineno)s)- %(message)s- [url :- %(url_request)s]',
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/api/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/api/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_REDIRECT_URL = config('EMAIL_REDIRECT_URL')

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True
